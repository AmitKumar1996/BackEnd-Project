spring.application.name=ProductService
#productservice.type=fakeStoreProductService
springdoc.show-actuator=true

management.endpoint.web.exposure.include=*

# When we run our application on server Application. property comes in to picture
#Application . property is a hashmap Key : value pair

server.port=4000


# Fakestore Config Values
fakestore.api.url=https://fakestoreapi.com
fakestore.api.paths.product=/products

spring.devtools.livereload.enabled=false

#------------------------------------------------------------------------

# How to connect with Data base
# This property controls when stack traces will be included in server error responses.
# Possible values:
# - "always" (include stack traces in error responses)
# - "on_throwable" (only include stack traces for Throwable objects)
# - "never" (never include stack traces in error responses)
#server.error.include-stacktrace=never

# This setting controls how Hibernate handles the database schema.
# The 'update' option ensures that Hibernate automatically updates the database schema to match the current entity mappings.
# Other possible values:
# - 'none' (no automatic schema updates)
# - 'validate' (validate that the schema is correct, but make no changes)
# - 'create' (create the schema on startup, dropping any existing data)
# - 'create-drop' (create the schema and drop it on shutdown)
spring.jpa.hibernate.ddl-auto=update

# This property specifies the JDBC URL for the database connection.
# It defines the host, port, and database name for the MySQL database.
spring.datasource.url=jdbc:mysql://localhost:3306/dec24productservice

# This sets the username for the MySQL database connection.
spring.datasource.username=root

# This sets the password for the MySQL database connection.
spring.datasource.password=root@123

# This property specifies the fully qualified class name of the JDBC driver to be used for the connection.
# For MySQL, the correct driver is `com.mysql.cj.jdbc.Driver`.
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver

# This property enables the display of SQL queries that Hibernate generates and executes.
# This is useful for debugging and seeing the raw SQL queries executed by Hibernate.
spring.jpa.show-sql=true

# The following lines are commented out, but they provide additional logging for Hibernate SQL queries.
# logging.level.org.hibernate.SQL=DEBUG
# This would enable detailed logging of SQL queries that Hibernate generates.
#
# logging.level.org.hibernate.type=TRACE
# This would enable logging of Hibernate type conversion operations (e.g., how it maps Java types to SQL types).

# This property enables detailed logging for SQL parameter binding in Hibernate.
# The TRACE level will log the binding of each parameter with its value for SQL statements.
logging.level.org.hibernate.type.descriptor.sql.BasicBinder=TRACE
spring.jpa.properties.hibernate.format_sql=true


# Enable colorful output and SQL formatting
logMessageFormat=com.p6spy.engine.spy.appender.MultiLineFormat
stacktrace=false





#DB migration

spring.flyway.enabled=true
spring.flyway.locations=classpath:db/migration
spring.flyway.baseline-on-migrate=true


#--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# logging.level.root =    DEBUG


logging.level.org.springframework=DEBUG
logging.level.org.springframework.web=DEBUG


//spring.profiles.active=dev
